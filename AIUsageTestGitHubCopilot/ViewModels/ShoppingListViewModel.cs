using AIUsageTestGitHubCopilot.Command;
using AIUsageTestGitHubCopilot.Models;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Linq;
using System.Runtime.Serialization.Formatters.Binary;
using System.Runtime.Serialization.Json;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Input;

namespace AIUsageTestGitHubCopilot.ViewModels
{
    public class ShoppingListViewModel : INotifyPropertyChanged
    {
        public INavigation _navigation; // Changed access modifier to public
        private ObservableCollection<ShoppingListModel> _shoppingList = new(); // Changed List to ObservableCollection
        public ICommand AddProductCommand { get; set; } // Changed access modifier to public and renamed by hand

        //Removed private ICommand generated by GitHub Copilot

        public ShoppingListViewModel(INavigation navigation)
        {
            _navigation = navigation;
            AddProductCommand = new AddProductCommand(this);
            _shoppingList = LoadShoppingList(); // Load the shopping list from the device
        }

        public ObservableCollection<ShoppingListModel> ShoppingList // Changed List to ObservableCollection
        {
            get { return _shoppingList; }
            set
            {
                if (_shoppingList != value)
                {
                    _shoppingList = value;
                    OnPropertyChanged(nameof(ShoppingList));
                    SaveShoppingList(_shoppingList); // Save the shopping list to the device
                }
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        /*
         * Load and Save - generated by GitHub Copilot Chat. Does not work as expected.
         * My approach would be to use JsonSerializer instead of BinaryFormatter and write it to a text file.
         */
        private ObservableCollection<ShoppingListModel> LoadShoppingList() // Changed List to ObservableCollection
        {
            try
            {
                using (FileStream fileStream = new FileStream("shoppinglist.dat", FileMode.OpenOrCreate))
                {
                    var binaryFormatter = new DataContractJsonSerializer(typeof(ObservableCollection<ShoppingListModel>)); // Changed List to ObservableCollection
                    return (ObservableCollection<ShoppingListModel>)binaryFormatter.ReadObject(fileStream); // Changed List to ObservableCollection
                }
            }
            catch (Exception)
            {
                // Handle the exception or return a new instance of ShoppingListModel
                return new ObservableCollection<ShoppingListModel>(); // Changed List to ObservableCollection
            }
        }

        private void SaveShoppingList(ObservableCollection<ShoppingListModel> shoppingList) // Changed List to ObservableCollection
        {
            try
            {
                using (FileStream fileStream = new FileStream("shoppinglist.dat", FileMode.Create))
                {
                    var binaryFormatter = new DataContractJsonSerializer(typeof(ObservableCollection<ShoppingListModel>)); // Changed List to ObservableCollection
                    binaryFormatter.WriteObject(fileStream, shoppingList); // Changed List to ObservableCollection
                }
            }
            catch (Exception)
            {
                // Handle the exception
            }
        }
    }
}
